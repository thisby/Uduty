<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Duty extends \Entity\Duty implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * {@inheritDoc}
     * @return array
     */
    public function __sleep()
    {
        $properties = array_merge(['__isInitialized__'], parent::__sleep());

        if ($this->__isInitialized__) {
            $properties = array_diff($properties, array_keys($this->__getLazyProperties()));
        }

        return $properties;
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Duty $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContenu($contenu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContenu', [$contenu]);

        return parent::setContenu($contenu);
    }

    /**
     * {@inheritDoc}
     */
    public function getContenu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContenu', []);

        return parent::getContenu();
    }

    /**
     * {@inheritDoc}
     */
    public function setPaysList($pays_list)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPaysList', [$pays_list]);

        return parent::setPaysList($pays_list);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaysList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaysList', []);

        return parent::getPaysList();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsFree($is_free)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsFree', [$is_free]);

        return parent::setIsFree($is_free);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsFree()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsFree', []);

        return parent::getIsFree();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrixMinimum($prix_minimum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrixMinimum', [$prix_minimum]);

        return parent::setPrixMinimum($prix_minimum);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrixMinimum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrixMinimum', []);

        return parent::getPrixMinimum();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrixMaximum($prix_maximum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrixMaximum', [$prix_maximum]);

        return parent::setPrixMaximum($prix_maximum);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrixMaximum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrixMaximum', []);

        return parent::getPrixMaximum();
    }

    /**
     * {@inheritDoc}
     */
    public function setUltimatumDate($ultimatum_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUltimatumDate', [$ultimatum_date]);

        return parent::setUltimatumDate($ultimatum_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getUltimatumDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUltimatumDate', []);

        return parent::getUltimatumDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId($user_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', [$user_id]);

        return parent::setUserId($user_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', []);

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setObjetId($objet_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObjetId', [$objet_id]);

        return parent::setObjetId($objet_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getObjetId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjetId', []);

        return parent::getObjetId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setObjet(\Entity\Objet $objet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObjet', [$objet]);

        return parent::setObjet($objet);
    }

    /**
     * {@inheritDoc}
     */
    public function getObjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjet', []);

        return parent::getObjet();
    }

}
